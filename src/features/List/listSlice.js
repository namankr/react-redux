import { createAsyncThunk, createSlice, current } from "@reduxjs/toolkit";
import fetchUser from "./listApi";

const initialState = {
  user: [],
  status: "idle",
  removedUser: [],
  counter: 1,
};

export const getUserAsync = createAsyncThunk("user/fetchUser", async () => {
  const response = await fetchUser();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const listSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      // console.log('actionadd',state.user);

      let removedUser = current(state.removedUser);
      if (removedUser && removedUser.length < 1) {
        alert("first, please remove a user. To add a user");
      } else {
        let counter = state.counter;
        let user = current(state.user);
        let len = removedUser.length;
        if (len - counter > 0) {
          let tempObj = removedUser[len - counter]; //[...removedUser, ...user];
          let tempArray = [];
          tempArray.push(tempObj);
          state.user = [...tempArray, ...user]; //mergedArray.filter((item, pos) => mergedArray.indexOf(item) === pos);
          state.counter += 1;
        }
      }
    },
    remove: (state) => {
      let user = current(state.user);
      let newAraay = [...user];
      state.removedUser.push(newAraay.shift());
      state.user = [...newAraay];
    },

    // Use the PayloadAction type to declare the contents of `action.payload`
    // loadUser: (state, action) => {
    //   state.user += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.user = action.payload;
      });
  },
});

export const selectUser = (state) => state.user;
export const { add, remove, loadUser } = listSlice.actions;
export default listSlice.reducer;
